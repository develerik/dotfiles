[core]
	# use neovim as default editor
	editor = nvim
	# don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space

[init]
	defaultBranch = main

[branch]
	# automatic rebase on pull
	autosetuprebase = always

[fetch]
	# automatically prune branches
	prune = true
	# automatically prune tags
	pruneTags = true

[pull]
	# use rebase pull instead of merge
	rebase = true

[submodule]
	recurse = true

[status]
	# use short lines
	short = true
	# show the branch in short format
	branch = true
	# always show all untracked files
	showUntrackedFiles = all

[color]
	# colorful ui
	ui = auto

[credential]
	# use 1password as credential store
	helper = !git-credential-1password -c 900

[help]
	autocorrect = 1

[log]
	# use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true

[diff]
	# style moved blocks differently
	colormoved = dimmed-zebra
	# use better diff algorithm
	algorithm = histogram
	# configure vscode as external difftool
	tool = vscode
	# detect copies as well as renames
	renames = copies

# better swift diff
[diff "swift"]
	xfuncname = ^[ \t]*((class|func)[ \t].*)$

# better wasm diff
[diff "wasm"]
	textconv = wasm2wat --enable-all --generate-names

# better exif diff
[diff "exif"]
	binary = true
	textconv = exiftool

# better pdf diff
[diff "pdf"]
	textconv = pdftotext

[difftool]
	prompt = false

[merge]
	# configure vscode as external mergetool
	tool = vscode

[mergetool]
	# clean up backup files created by merge tools on tool exit
	keepBackup = false
	# clean up temp files created by merge tools on tool exit
	keepTemporaries = false
	# auto-accept file prompts when launching merge tools
	prompt = false

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE

[difftool "vimdiff"]
	cmd = nvim -d $LOCAL $REMOTE

[mergetool "vscode"]
	cmd = code --wait $MERGED

[mergetool "vimdiff"]
	cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[alias]
	# create a .gitignore file from toptal templates
	ignore = "!gi() { IFS=\",\"; curl -L -s \"https://www.toptal.com/developers/gitignore/api/$*\" | tee .gitignore;}; gi"
	# allow the use of identities
	identity = "!git config user.name \"$(git config user.$1.name)\"; git config user.email \"$(git config user.$1.email)\"; git config user.signingkey \"$(git config user.$1.signingkey)\"; :"
	# show all aliases
	aliases = "--list-cmds=alias"
	# view abbreviated SHA, description, and history graph of the latest 20 commits
	l = "log --pretty=oneline -n 20 --graph --abbrev-commit"
	# show a graph summay
	ll = "log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %C(cyan)[%an]%Creset'"
	# publish a new git branch on the remote
	publish = "!git push -u origin $(git branch --show-current)"
	# remove a git branch from the remote
	unpublish = "!git push origin :$(git branch --show-current)"
	# show all remotes
	remotes = "remote -v"
	# list contributors with number of commits
	contributors = "shortlog --summary --numbered"
	# show all branches
	branches = "branch -a"
	# show all stashes
	stashes = "stash list"
	# show all tags
	tags = "tag -n1 --list"
	# end of work: push wip commit
	eow = "!git add -A; git commit -am '[WIP] Done for today, cya tomorrow [skip ci]'; git push"
	# faster commit
  c = "commit -m"
  # faster commit (with sign)
  cs = "commit --gpg-sign -m"
	# safer force push
	pf = "push --force-with-lease"
	# faster checkout
	cb = "checkout -b"
	# switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	# undo last commit
	undo = "reset --soft HEAD^"
	# unstage a file
	unstage = "reset HEAD --"
	# stop tracking a file
	forget = "update-index --assume-unchanged"
	# edit last commit message
	reword = "commit --amend"
	# safe force push
	fpush = "push --force-with-lease"
	# amend to commit without changing the message
	oops = "!f(){ \
		if [ \"$1\" == '' ]; then \
			git commit --amend --no-edit; \
		else \
			git commit --amend \"$@\"; \
		fi;\
	}; f"

[user]
	# use git identities
	useConfigOnly = true

# include local configuration
[include]
	path = .config/git/config

# include local identities
[include]
	path = .config/git/identities

# include local aliases
[include]
	path = .config/git/aliases
